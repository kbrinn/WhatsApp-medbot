version: '3.8'

services:
  # ──────────────────────────────
  # FastAPI application
  # ──────────────────────────────
  app:
    build:
      context: .
      dockerfile: app/Dockerfile
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app

    environment:
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      db:                       # wait until Postgres is healthy
        condition: service_healthy
    networks:
      - app-network

  # ──────────────────────────────
  # PostgreSQL 15-alpine
  # ──────────────────────────────
  db:
    image: postgres:15-alpine
    env_file:
      - .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

    # Mount our schema & any future migrations so Postgres
    # runs them automatically on first initialisation.
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init/:/docker-entrypoint-initdb.d/:ro   # ← put 01_schema.sql here

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - app-network

# ──────────────────────────────
# Named volumes & network
# ──────────────────────────────
volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
